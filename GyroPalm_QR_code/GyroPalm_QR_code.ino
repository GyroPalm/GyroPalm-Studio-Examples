// Begin AutoGenerated Includes - DO NOT EDIT BELOW
#include <GyroPalmEngine.h>
#include <GyroPalmLVGL.h>
// End AutoGenerated Includes - DO NOT EDIT ABOVE

#include <lv_qrcode.h>  // Include the LVGL QR code plugin

// Begin AutoGenerated Globals - DO NOT EDIT BELOW
GyroPalm *device;
GyroPalmEngine gplm("gp123456");    //declares a GyroPalm Engine object with wearableID

AXP20X_Class *power;
lv_task_t *barTask;
void lv_update_task(struct _lv_task_t *);

enum Screen { SCR_HOME };	//Screen indexes
lv_obj_t *screen[1];    //screen pointers
GyroPalmLVGL form[1];   //screen helper methods
Screen curScreen = SCR_HOME;    //default screen
// End AutoGenerated Globals - DO NOT EDIT ABOVE

lv_obj_t * qr;  // LVGL object for QR code
int counter = 0;    // counter for dynamic QR test

// Begin AutoGenerated Callbacks - DO NOT EDIT BELOW
void lv_update_task(struct _lv_task_t *data) {
    int battPercent = power->getBattPercentage();
    bool isCharging = power->isChargeing();
    form[curScreen].updateBar(battPercent, isCharging);
    form[curScreen].setTime(gplm.getTime());     //update Time View

    if (counter % 10 == 0) {    // Update the QR code every 10 seconds
        updateQR("Hello World " + String(counter)); // Update the QR code
    }
    counter++;  // Increment the counter
}

static void btn_event_handler(lv_obj_t * obj, lv_event_t event)
{
    if (event == LV_EVENT_CLICKED) {
        String btnName = lv_list_get_btn_text(obj);
		Serial.printf("Clicked: %s\n", btnName);

        switch (curScreen)
        {
            case SCR_HOME:
			
            break;

            default: break;
		}
	}
}

// End AutoGenerated Callbacks - DO NOT EDIT ABOVE

void updateQR(String qrString) {
    // Set data for QR code
    lv_qrcode_update(qr, qrString.c_str(), strlen(qrString.c_str()));
    lv_obj_align(qr, NULL, LV_ALIGN_CENTER, 0, 35); // Align to center of screen
}

// Begin AutoGenerated Screens - DO NOT EDIT BELOW
void showApp(int page) {
    if ((Screen) page != curScreen) {
        form[curScreen].removeBar();    //remove old StatusBar before proceeding
    }

    switch (page)
    {
		case SCR_HOME:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());
			form[curScreen].createLabel(0, -60, "QR Code Test");    //show element

            // Create a 150x150 QR code object
            qr = lv_qrcode_create(form[curScreen]._screen, 150, lv_color_hex3(0x018), lv_color_hex3(0xeef));

            updateQR("Hello World");    // Set QR code content

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;


        default: break;
    }
    gplm.setScreen(&form[curScreen]);
}
// End AutoGenerated Screens - DO NOT EDIT ABOVE

void setup() {
	
    // Begin AutoGenerated Setup - DO NOT EDIT BELOW
	gplm.begin();
	delay(100);
	gplm.listenEvents(false);    //starts listening for events

	device = gplm.wearable; //gives control to the developer to run device methods
	device->lvgl_begin();   //Initiate LVGL core
	device->bl->adjust(120);    //Lower the brightness
	power = gplm.power;		//gives control to the developer to access power methods
	power->setChargeControlCur(500);    //enable fast charging

	showApp(curScreen);
	// End AutoGenerated Setup - DO NOT EDIT ABOVE
}

void loop() {
	
    // Begin AutoGenerated Loop - DO NOT EDIT BELOW
	lv_task_handler();
	delay(50);
	// End AutoGenerated Loop - DO NOT EDIT ABOVE
}
