// Begin AutoGenerated Includes - DO NOT EDIT BELOW
#include <GyroPalmEngine.h>
#include <GyroPalmLVGL.h>
// End AutoGenerated Includes - DO NOT EDIT ABOVE

// Begin AutoGenerated Globals - DO NOT EDIT BELOW
GyroPalm *device;
GyroPalmEngine gplm("gp123456");    //declares a GyroPalm Engine object with wearableID

AXP20X_Class *power;
lv_task_t *barTask;
void lv_update_task(struct _lv_task_t *);

enum Screen { SCR_HOME, SCR_BUTTONS, SCR_LEDS, SCR_CONTROL, SCR_STATS, SCR_ROBOT };  //Screen indexes
lv_obj_t *screen[6];    //screen pointers
GyroPalmLVGL form[6];   //screen helper methods
Screen curScreen = SCR_HOME;    //default screen
// End AutoGenerated Globals - DO NOT EDIT ABOVE

lv_obj_t * msgboxA;
lv_obj_t * msgboxB;
uint32_t steps = 0;

// Begin AutoGenerated Callbacks - DO NOT EDIT BELOW
void lv_update_task(struct _lv_task_t *data) {
    int battPercent = power->getBattPercentage();
    bool isCharging = power->isChargeing();
    form[curScreen].updateBar(battPercent, isCharging);
    form[curScreen].setTime(gplm.getTime());     //update Time View
}

void onPwrQuickPress()
{
    /*
    After the AXP202 interrupt is triggered, the interrupt status must be cleared,
    * otherwise the next interrupt will not be triggered
    */
    power->clearIRQ();

    // We are sleeping the device when power button pressed
    device->displaySleep();
    device->powerOff();
    esp_sleep_enable_ext1_wakeup(GPIO_SEL_35, ESP_EXT1_WAKEUP_ALL_LOW);
    esp_deep_sleep_start();
}

void onStep(uint32_t stepCount)
{
    steps = stepCount;  //set global var
}

static void btn_event_handler(lv_obj_t * obj, lv_event_t event)
{
    if (event == LV_EVENT_CLICKED) {
        String btnName = lv_list_get_btn_text(obj);
    Serial.printf("Clicked: %s\n", btnName);

        switch (curScreen)
        {
            case SCR_HOME:
                if (btnName == "Demo Buttons") {
                    showApp(SCR_BUTTONS);
                }
                else if (btnName == "Demo LEDs") {
                    showApp(SCR_LEDS);
                }
                else if (btnName == "Demo Control") {
                    showApp(SCR_CONTROL);
                }
                else if (btnName == "Demo Stats") {
                    showApp(SCR_STATS);
                }
                else if (btnName == "Demo Robot") {
                    showApp(SCR_ROBOT);
                }
            break;

            case SCR_BUTTONS:
                if (btnName == "Msg A") {
            msgboxA = form[curScreen].createMsgBox("This is a test message!", PROMPT_OK_CANCEL, msgbox_handler, false);
                }
                else if (btnName == "Msg B") {
            msgboxB = form[curScreen].createMsgBox("Do you want to save?", PROMPT_YES_NO_CANCEL, msgbox_handler, false);
                }
                else if (btnName == "Home") {
            showApp(SCR_HOME);
                }
            break; 

            case SCR_LEDS:     
                if (btnName == "Home") {
            showApp(SCR_HOME);
                }
            break;     

            case SCR_CONTROL:     
                if (btnName == "Home") {
            showApp(SCR_HOME);
                }
            break;  

            case SCR_STATS:     
                if (btnName == "Home") {
            showApp(SCR_HOME);
                }
            break;  

            case SCR_ROBOT:     
                if (btnName == "Home") {
            showApp(SCR_HOME);
                }
            break; 

            default: break;
    }
  }
}

static void slider_event_handler(lv_obj_t * slider, lv_event_t event)
{
    if(event == LV_EVENT_VALUE_CHANGED) {
    int sliderVal = lv_slider_get_value(slider);
    
        switch (curScreen)
        {
            case SCR_HOME:
      
            break;

            default: break;
        }
    }
}

static void roller_event_handler(lv_obj_t * roller, lv_event_t event)
{
    if(event == LV_EVENT_VALUE_CHANGED) {
    int rollerIndex = lv_roller_get_selected(roller);
    char buf[32]; //selected string
    lv_roller_get_selected_str(roller, buf, sizeof(buf));
    
        switch (curScreen)
        {
            case SCR_HOME:
      
            break;

            default: break;
        }
    }
}

static void msgbox_handler(lv_obj_t *msgbox, String btnText)
{
  
    if (msgbox == msgboxA) {
        Serial.println("Response from MsgBox A");
        msgboxA = NULL;
    }
    else if (msgbox == msgboxB) {
        Serial.println("Response from MsgBox B");
        msgboxB = NULL;
    }
    Serial.print("User response: ");
    Serial.println(btnText);
}

// End AutoGenerated Callbacks - DO NOT EDIT ABOVE

// Begin AutoGenerated Screens - DO NOT EDIT BELOW
void showApp(int page) {
    if ((Screen) page != curScreen) {
        form[curScreen].removeBar();    //remove old StatusBar before proceeding
    }

    switch (page)
    {
    case SCR_HOME:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

      lv_list_item myItems[5];
            myItems[0].img_src = LV_SYMBOL_FILE;
            myItems[0].txt = "Demo Buttons";
            myItems[1].img_src = LV_SYMBOL_DIRECTORY;
            myItems[1].txt = "Demo LEDs";
            myItems[2].img_src = LV_SYMBOL_EDIT;
            myItems[2].txt = "Demo Control";
            myItems[3].img_src = LV_SYMBOL_SAVE;
            myItems[3].txt = "Demo Stats";    //show element
            myItems[4].img_src = LV_SYMBOL_IMAGE;
            myItems[4].txt = "Demo Robot";    //show element

      form[curScreen].createList(0, 15, 224, 180, myItems, 5 , btn_event_handler);    //show element

            form[curScreen].showScreen(ANIM_LEFT);   //show the screen w/ no animation
        }
        break;

    case SCR_BUTTONS:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

      form[curScreen].createButton(-58, -37, "Home", btn_event_handler, true, 98);    //show element

      form[curScreen].createButton(58, -37, "Msg A", btn_event_handler, true, 98);    //show element

      form[curScreen].createButton(-58, 67, "Msg B", btn_event_handler, true, 98);    //show element

      form[curScreen].createButton(58, 67, "Button", btn_event_handler, true, 98);    //show element

            form[curScreen].showScreen(ANIM_RIGHT);   //show the screen w/ no animation
        }
        break;

    case SCR_LEDS:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

      lv_obj_t * led1 = form[curScreen].createLED(-77, -37, true);    //show element
            form[curScreen].setLEDcolor(led1, LV_COLOR_RED);

      lv_obj_t * led2 = form[curScreen].createLED(0, -37, false);    //show element
            form[curScreen].setLEDcolor(led2, LV_COLOR_GREEN);

      form[curScreen].createLED(77, -37, true);    //show element

      form[curScreen].createButton(-58, 67, "Home", btn_event_handler, true, 98);    //show element

      form[curScreen].createLabel(58, 67, "LEDs Active");    //show element

            form[curScreen].showScreen(ANIM_RIGHT);   //show the screen w/ no animation
        }
        break;

    case SCR_CONTROL:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

      form[curScreen].createButton(-58, -37, "Home", btn_event_handler, true, 98);    //show element

      form[curScreen].createSlider(58, -37, 0, 100, slider_event_handler, 108, 50);    //show element

      form[curScreen].createRoller(0, 60, "Item A\nItem B\nItemC\nItemD\nItemE", 3, roller_event_handler, true, 224);    //show element

            form[curScreen].showScreen(ANIM_RIGHT);   //show the screen w/ no animation
        }
        break;

    case SCR_STATS:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

      form[curScreen].createLabel(-77, -37, "Station 1\nEnabled");    //show element

      form[curScreen].createLabel(0, -37, "Station 2\nDisabled");    //show element

      form[curScreen].createLabel(77, -37, "Station 3\nEnabled");    //show element

      form[curScreen].createButton(-77, 67, "Home", btn_event_handler, true, 59);    //show element

      form[curScreen].createLabel(0, 67, "Voltage \n119.82 V");    //show element

      form[curScreen].createLabel(77, 67, "Current \n4.625 A");    //show element

            form[curScreen].showScreen(ANIM_RIGHT);   //show the screen w/ no animation
        }
        break;

    case SCR_ROBOT:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());

      form[curScreen].createButton(0, -54, "Forward", btn_event_handler, true, 68);    //show element

      form[curScreen].createButton(-77, 15, "Left", btn_event_handler, true, 59);    //show element

      form[curScreen].createButton(0, 15, "Home", btn_event_handler, true, 59);    //show element

      form[curScreen].createButton(77, 15, "Right", btn_event_handler, true, 59);    //show element

      form[curScreen].createButton(0, 84, "Backward", btn_event_handler, true, 68);    //show element

            form[curScreen].showScreen(ANIM_RIGHT);   //show the screen w/ no animation
        }
        break;

        default: break;
    }
}
// End AutoGenerated Screens - DO NOT EDIT ABOVE

void setup() {

    // Begin AutoGenerated Setup - DO NOT EDIT BELOW
  gplm.begin();
  delay(100);
  gplm.listenEvents(false);    //starts listening for events

    // Include only the callbacks you need:
    gplm.setStepCallback(onStep);
    gplm.setPwrQuickPressCallback(onPwrQuickPress);
    delay(200);

  device = gplm.wearable; //gives control to the developer to run device methods
  device->lvgl_begin();   //Initiate LVGL core
  device->bl->adjust(120);    //Lower the brightness
  power = gplm.power;   //gives control to the developer to access power methods
  power->setChargeControlCur(500);    //enable fast charging

  showApp(curScreen);
  // End AutoGenerated Setup - DO NOT EDIT ABOVE
}

void loop() {

    // Begin AutoGenerated Loop - DO NOT EDIT BELOW
  lv_task_handler();
  delay(50);
  // End AutoGenerated Loop - DO NOT EDIT ABOVE
}
